// Есть два подхода к изменению данных.
// Первый подход — мутировать(изменять) данные, напрямую устанавливая новые значения.
// Второй подход — заменять данные новой копией, которая содержит изменения.

// Мутирующее изменение данных
var player = {score: 1, name: 'Джефф'};
player.score = 2;
// Теперь player имеет значение {score: 2, name: 'Джефф'}

// Изменение данных без мутаций
var player = {score: 1, name: 'Джефф'};

var newPlayer = Object.assign({}, player, {score: 2});
// Здесь `player` не изменился, а в `newPlayer` находится {score: 2, name: 'Джефф'}

// Или, если вы пользуетесь синтаксисом расширения объектов, вы можете написать:
// var newPlayer = {...player, score: 2};

// Избежание прямой мутации данных позволяет сохранять предыдущее состояния объекта без изменений и обращаться к ним позже.

// Обнаружение изменений в иммутабельных объектах намного проще.
// Если неизменяемый объект, на который ссылается, отличается от предыдущего, то объект изменился.

// push — мутабильный, concat – иммутабельных
